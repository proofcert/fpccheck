%%%%%%%%%%%%%%%%%%%%%%%%
% Simple, TAC-like FPC %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A reusable FPC that aims for compact, readable certificates while retaining
% much of the flexibility of administrative FPCs.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%
% Natural numbers %
%%%%%%%%%%%%%%%%%%%

%TODO Configurable limits and programmatic predicates or given by Bedwyr (best).
% Note that the current nat type is stale, but we still want to avoid forcing
% illegible Peano numerals.
%Define inc : nat -> nat -> prop by
%	inc  0  1 ; inc  1  2 ; inc  2  3 ; inc  3  4 ; inc  4  5 ; inc  5  6 ;
%	inc  6  7 ; inc  7  8 ; inc  8  9 ; inc  9 10 ; inc 10 11 ; inc 11 12 ;
%	inc 12 13 ; inc 13 14 ; inc 14 15 ; inc 15 16 ; inc 16 17 ; inc 17 18 ;
%	inc 18 19 ; inc 19 20.

Define dec : nat -> nat -> prop by
	dec  1  0 ; dec  2  1 ; dec  3  2 ; dec  4  3 ; dec  5  4 ; dec  6  5 ;
	dec  7  6 ; dec  8  7 ; dec  9  8 ; dec 10  9 ; dec 11 10 ; dec 12 11 ;
	dec 13 12 ; dec 14 13 ; dec 15 14 ; dec 16 15 ; dec 17 16 ; dec 18 17 ;
	dec 19 18 ; dec 20 19.

%%%%%%%%%%%%%%%%
% Full indexes %
%%%%%%%%%%%%%%%%

%HACK This is used as "common" and shouldn't be FPC-specific
Kind   numidx   type.
Type   z        numidx.
Type   s        numidx -> numidx.

% Indexes (names) and index pairs
Type   idx    string -> idx.
Type   idx2   idx -> idx -> idx.

% Binare trees of indexes
Kind   bt                 type.
Type   btinit             bt.
Type   btlemma, btlocal   idx -> bt -> bt.
Type   btbranch           bt -> bt -> bt.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Certificate constructors %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Self-contained certificates: they end a chain or constitute one unto
% themselves. May generally comprise several bipoles, so the following numeric
% parameters are given:
%  - number of bipoles;
%  - number of asynchronous unfolds per bipole;
%  - number of synchronous unfolds per bipole;
%  - number of asynchronous unfolds left in current bipole; and
%  - number of asynchronous unfolds left in current bipole.
% In principle, the last two should be initialized to be equal to the full
% counts and are meant to be passive: one should not try to mess with them.
% The search certificate simply tries to end this within the current bipole
% without doing anything particularly smart.
Type   induction   nat -> nat -> nat -> nat -> nat -> cert.
Type   apply       nat -> nat -> nat -> nat -> nat -> cert.
Type   search                                         cert.

% Wrapped versions of self-contained certificates
Type   induction!   nat -> nat -> nat -> cert.
Type   apply!       nat -> nat -> nat -> cert.

% Chained certificates: they perform their mandate and proceed to the next
% continuation certificate(s) when they are done; a chain or branch thereof will
% end with a self-contained certificate. The current certificates are:
%  - induction, to be applied immediately, without doing anything smart;
%  - case, an asynchronous split, possible involving a number of allowed
%    asynchronous unfolds, and yielding certificates for both sides; and
%  - apply, which represents a bipole with concrete allowances for both kinds of
%    unfolding operations and ends upon release; the index directs whether a
%    local or a global decide will be performed.
Type   induction?                         cert -> cert.
Type   case?        nat        -> cert -> cert -> cert.
Type   apply?       nat -> nat -> idx  -> cert -> cert.

% Elaboration certificates: mimic the structure of self-contained certificates
% and add a binary tree of decisions that will enable elaboration into a chain
% of well-defined certificates (for now limited to decisions, though it should
% be extendable to bounds). It looks like a more general transformation on the
% fly is troublesome from the point of view of unification, even though the
% scheme seems straightforward in my mind. (For now, however, I'm keeping the
% auxiliary members of pair#, which "should" be pretty much innocuous...)
Type   pair#        cert -> cert -> cert.
Type   induction#   nat -> nat -> nat -> nat -> nat -> bt -> cert.
Type   apply#       nat -> nat -> nat -> nat -> nat -> bt -> cert.

% Variants for explicit induction with invariant
Type   inductionS    nat -> nat -> nat -> nat -> nat -> (i -> bool) -> cert.
Type   inductionS?   cert -> (i -> cert) -> (i -> bool) -> cert.

#include "debug-simple-fpc.thm".

%%%%%%%%%%%%%%%%%
% Unmarshalling %
%%%%%%%%%%%%%%%%%

% Unwrap shorthand certificates
Define unmarshal : cert -> cert -> prop by
	unmarshal (induction! B A S) (induction B A S A S) ;
	unmarshal (apply! B A S) (apply B A S A S) ;
	unmarshal Cert Cert := (
		Cert = (induction _ _ _ _ _) \/
		Cert = (inductionS _ _ _ _ _ _) \/
		Cert = (apply _ _ _ _ _) \/
		Cert = search \/
		Cert = (induction? _) \/
		Cert = (inductionS? _ _ _) \/
		Cert = (case? _ _ _) \/
		Cert = (apply? _ _ _ _) \/
		Cert = (pair# _ _) \/
		Cert = (induction# _ _ _ _ _ _) \/
		Cert = (apply# _ _ _ _ _ _)
	).

%%%%%%%%%%%%%%%%%%%%%
% Helper predicates %
%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------%
% Control structure - Computation limits %
%----------------------------------------%

Define unfoldAsync : cert -> cert -> prop by
	unfoldAsync (apply N AU SU AC SC) (apply N AU SU AC' SC) := dec AC AC' ;
	unfoldAsync (apply? AC SC I C) (apply? AC' SC I C) := dec AC AC' ;
	unfoldAsync (case? AC CL CR) (case? AC' CL CR) := dec AC AC' ;
	unfoldAsync (pair# (apply N AU SU AC  SC) (apply# N AU SU AC  SC Idx))
	            (pair# (apply N AU SU AC' SC) (apply# N AU SU AC' SC Idx)) :=
		dec AC AC'.

Define unfoldSync : cert -> cert -> prop by
	unfoldSync (apply N AU SU AC SC) (apply N AU SU AC SC') := dec SC SC' ;
	unfoldSync (apply? AC SC I C) (apply? AC SC' I C) := dec SC SC' ;
	unfoldSync (pair# (apply N AU SU AC SC ) (apply# N AU SU AC SC  Idx))
	           (pair# (apply N AU SU AC SC') (apply# N AU SU AC SC' Idx)) :=
		dec SC SC'.

% Currently, we are assuming that init rules don't close certificates entirely,
% but as we get mixed results, e.g. unexhausted bipole depths, this may well be
% different.
Define endBipole : cert -> cert -> prop by
	endBipole (apply N AU SU _ _) (apply N' AU SU AU SU) := dec N N' ;
	endBipole (apply 0 _  _  _ _) search ;
	endBipole (apply? _ _ _ C) C ;
	endBipole (pair# (apply N  AU SU _  _ ) (apply# N  AU SU _  _  Idx))
	          (pair# (apply N' AU SU AU SU) (apply# N' AU SU AU SU Idx)) :=
		dec N N' ;
	endBipole (pair# (apply 0 _ _ _ _) (apply# 0 _ _ _ _ Idx))
	          (pair# search search).

Define isSimpleCase : cert -> prop by
	isSimpleCase (induction _ _ _ _ _) ;
	isSimpleCase (inductionS _ _ _ _ _ _) ;
	isSimpleCase (apply _ _ _ _ _) ;
	isSimpleCase search ;
	isSimpleCase (induction? _) ;
	isSimpleCase (inductionS? _ _ _) ;
	isSimpleCase (apply? _ _ _ _).

Define isNotPair : cert -> prop by
	isNotPair (induction _ _ _ _ _) ;
	isNotPair (inductionS _ _ _ _ _ _) ;
	isNotPair (apply _ _ _ _ _) ;
	isNotPair search ;
	isNotPair (induction? _) ;
	isNotPair (inductionS? _ _ _) ;
	isNotPair (case? _ _ _) ;
	isNotPair (apply? _ _ _ _) ;
	isNotPair (induction# _ _ _ _ _ _) ;
	isNotPair (apply# _ _ _ _ _ _).

%%%%%%%%%%%%%%%%%%%%%%
% Clerks and experts %
%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------%
% Propositional asynchronous phase %
%----------------------------------%

Define ffClerk : cert -> prop by
	ffClerk Cert
%	:= println "ffClerk" /\ print_cert Cert %DEBUG
	.

Define ttClerk : cert -> cert -> prop by
	ttClerk Cert Cert
%	:= println "ttClerk" /\ print_cert Cert %DEBUG
	.

Define andClerk : cert -> cert -> prop by
	andClerk Cert Cert
%	:= println "andClerk" /\ print_cert Cert %DEBUG
	.

% Be careful with apply? and induction (does the latter make sense?)
% Ensure proper case splitting
Define orClerk : cert -> cert -> cert -> prop by
	orClerk Cert Cert Cert :=
		isSimpleCase Cert
%		/\ println "orClerk simple case" /\ print_cert Cert %DEBUG
		;
	orClerk (case? _ CertL CertR) CertL CertR
%	:= println "orClerk case?" /\ print_cert CertL /\ print_cert CertR %DEBUG
	;
	orClerk (apply# N AU SU AC SC (btbranch IdxL IdxR))
	        (apply# N AU SU AC SC IdxL)
	        (apply# N AU SU AC SC IdxR)
%	:= println "orClerk apply#" %DEBUG
	;
	orClerk (pair# Cert1 Cert2) (pair# CertL1 CertL2) (pair# CertR1 CertR2) :=
		orClerk Cert1 CertL1 CertR1 /\
		orClerk Cert2 CertL2 CertR2
%		/\ println "orClerk pair#" %DEBUG
	.

Define impClerk : cert -> cert -> prop by
	impClerk Cert Cert
%	:= println "impClerk" /\ print_cert Cert %DEBUG
	.

Define eqClerk : cert -> cert -> prop by
	eqClerk Cert Cert
%	:= println "eqClerk" /\ print_cert Cert %DEBUG
	.

%---------------------------------%
% Propositional synchronous phase %
%---------------------------------%

Define ttExpert : cert -> prop by
	ttExpert Cert
%	:= println "ttExpert" /\ print_cert Cert %DEBUG
	.

Define andExpert : cert -> cert -> cert -> prop by
	andExpert Cert Cert Cert
%	:= println "andExpert" /\ print_cert Cert %DEBUG
	.

Define orExpert : cert -> cert -> choice -> prop by
	orExpert Cert Cert left 
%	:= println "orExpert left" /\ print_cert Cert %DEBUG
	;
	orExpert Cert Cert right
%	:= println "orExpert right" /\ print_cert Cert %DEBUG
	.

Define impExpert : cert -> cert -> cert -> prop by impExpert _ _ _ := false.

Define impExpert' : cert -> cert -> cert -> prop by
	impExpert' Cert Cert Cert
%	:= println "impExpert'" /\ print_cert Cert %DEBUG
	.

Define eqExpert : cert -> prop by
	eqExpert Cert
%	:= println "eqExpert" /\ print_cert Cert %DEBUG
	.

%-------------%
% Quantifiers %
%-------------%

Define allClerk : cert -> (i -> cert) -> prop by
	allClerk Cert (_\ Cert) :=
		isNotPair Cert
%		/\ println "allClerk" /\ print_cert Cert %DEBUG
		;
	allClerk (pair# Cert1 Cert2) (x\ pair# (Cert1' x) (Cert2' x)) :=
		allClerk Cert1 Cert1' /\
		allClerk Cert2 Cert2'
%		/\ println "allClerk pair#" %DEBUG
		.

Define someClerk : cert -> (i -> cert) -> prop by
	someClerk Cert (_\ Cert) :=
		isNotPair Cert
%		/\ println "someClerk" /\ print_cert Cert %DEBUG
		;
	someClerk (pair# Cert1 Cert2) (x\ pair# (Cert1' x) (Cert2' x)) :=
		someClerk Cert1 Cert1' /\
		someClerk Cert2 Cert2'
%		/\ println "someClerk pair#" %DEBUG
		.

Define allExpert : cert -> cert -> i -> prop by
	allExpert Cert Cert _
%	:= println "allExpert" /\ print_cert Cert %DEBUG
	.

Define someExpert : cert -> cert -> i -> prop by
	someExpert Cert Cert _
%	:= println "someExpert" /\ print_cert Cert %DEBUG
	.

%-------------------------%
% Fixed points: induction %
%-------------------------%

Define indClerk : cert -> cert -> (i -> cert) -> (i -> bool) -> prop by
	indClerk (inductionS N AU SU AC SC S)
	         (   apply   N AU SU AC SC  )
	         (_\ apply   N AU SC AC SC  )
	         S;
	indClerk (inductionS? Cert1 Cert2 S) Cert1 Cert2 S.
%	% Separate branching event?
%	indClerk (inductionS# N AU SU AC SC (btbranch IdxL IdxR) S)
%	         (   apply#   N AU SU AC SC           IdxL        )
%	         (_\ apply#   N AU SU AC SC                IdxR   )
%	         S ;
%	indClerk (pair# Cert1 Cert2)
%	         (pair# Cert1' Cert2')
%	         (x\ pair# (Cert1x' x) (Cert2x' x))
%	         S :=
%		indClerk Cert1 Cert1' Cert1x' S /\
%		indClerk Cert2 Cert2' Cert2x' S.

Define indClerk' : cert -> (i -> cert) -> prop by
	indClerk' (induction N AU SU AC SC) (_\ apply N AU SU AC SC)
%	:= println "indClerk' induction" %DEBUG
	;
	indClerk' (induction? Cert) (_\ Cert)
%	:= println "indClerk' induction?" %DEBUG
	;
	indClerk' (induction# N AU SU AC SC Idx) (_\ (apply# N AU SU AC SC Idx))
%	:= println "indClerk' induction#" %DEBUG
	;
	indClerk' (pair# Cert1 Cert2) (x\ pair# (Cert1' x) (Cert2' x)) :=
		indClerk' Cert1 Cert1' /\
		indClerk' Cert2 Cert2'
%		/\ println "indClerk' pair#" %DEBUG
		.

Define coindClerk : cert -> cert -> (i -> cert) -> (i -> bool) -> prop by
	coindClerk (inductionS N AU SU AC SC S)
	           (   apply   N AU SU AC SC  )
	           (_\ apply   N AU SC AC SC  )
	           S;
	coindClerk (inductionS? Cert1 Cert2 S) Cert1 Cert2 S.
% Same considerations as indClerk re: pairing, etc.

Define coindClerk' : cert -> (i -> cert) -> prop by
	coindClerk' (induction N AU SU AC SC) (_\ apply N AU SU AC SC)
%	:= println "coindClerk' induction" %DEBUG
	;
	coindClerk' (induction? Cert) (_\ Cert)
%	:= println "coindClerk' induction?" %DEBUG
	;
	coindClerk' (induction# N AU SU AC SC Idx) (_\ (apply# N AU SU AC SC Idx))
%	:= println "coindClerk' induction#" %DEBUG
	;
	coindClerk' (pair# Cert1 Cert2) (x\ pair# (Cert1' x) (Cert2' x)) :=
		coindClerk' Cert1 Cert1' /\
		coindClerk' Cert2 Cert2'
%		/\ println "coindClerk' pair#" %DEBUG
		.

%----------------------%
% Fixed points: unfold %
%----------------------%

Define unfoldLClerk : cert -> cert -> prop by
	unfoldLClerk Cert Cert' :=
		unfoldAsync Cert Cert'
%		/\ println "unfoldLClerk" /\ print_cert Cert /\ print_cert Cert' %DEBUG
		.

Define unfoldRExpert : cert -> cert -> prop by
	unfoldRExpert Cert Cert' :=
		unfoldSync Cert Cert'
%		/\ println "unfoldRExpert" /\ print_cert Cert /\ print_cert Cert' %DEBUG
		.

Define unfoldLExpert : cert -> cert -> prop by
	unfoldLExpert Cert Cert' :=
		unfoldSync Cert Cert'
%		/\ println "unfoldLExpert" /\ print_cert Cert /\ print_cert Cert' %DEBUG
		.

Define unfoldRClerk : cert -> cert -> prop by
	unfoldRClerk Cert Cert' :=
		unfoldAsync Cert Cert'
%		/\ println "unfoldRClerk" /\ print_cert Cert /\ print_cert Cert' %DEBUG
		.

%----------------------------------%
% Fixed points: freeze and initial %
%----------------------------------%

Define freezeLClerk : cert -> cert -> idx -> prop by
	freezeLClerk Cert Cert (idx "atom") :=
		isNotPair Cert
%		/\ println "freezeLClerk" /\ print_cert Cert %DEBUG
		;
	freezeLClerk (pair# Cert1 Cert2) (pair# Cert1' Cert2') (idx2 Idx1 Idx2) :=
		freezeLClerk Cert1 Cert1' Idx1 /\
		freezeLClerk Cert2 Cert2' Idx2
%		/\ println "freezeLClerk pair#" /\ println (idx2 Idx1 Idx2) %DEBUG
		.

Define initRExpert : cert -> idx -> prop by
	initRExpert Cert (idx "atom") :=
		isNotPair Cert
%		/\ println "initRExpert" /\ print_cert Cert %DEBUG
		;
	initRExpert (pair# Cert1 Cert2) (idx2 Idx1 Idx2) :=
		initRExpert Cert1 Idx1 /\
		initRExpert Cert2 Idx2
%		/\ println "initRExpert pair#" /\ println (idx2 Idx1 Idx2) %DEBUG
		.

Define freezeRClerk : cert -> cert -> prop by
	freezeRClerk Cert Cert
%	:= println "freezeLClerk" /\ print_cert Cert %DEBUG
	.

Define initLExpert : cert -> prop by
	initLExpert Cert :=
		isNotPair Cert
%		/\ println "initLExpert" /\ print_cert Cert %DEBUG
		;
	initLExpert (pair# Cert1 Cert2) :=
		initLExpert Cert1 /\
		initLExpert Cert2
%		/\ println "initLExpert pair#" %DEBUG
		.

%------------------%
% Structural rules %
%------------------%

Define storeLClerk : cert -> cert -> idx -> prop by
	storeLClerk Cert Cert (idx "local") :=
		isNotPair Cert
%		/\ println "storeLClerk" /\ print_cert Cert %DEBUG
		;
	storeLClerk (pair# Cert1 Cert2) (pair# Cert1' Cert2') (idx2 Idx1 Idx2) :=
		storeLClerk Cert1 Cert1' Idx1 /\
		storeLClerk Cert2 Cert2' Idx2
%		/\ println "storeLClerk pair#" /\ println (idx2 Idx1 Idx2) %DEBUG
		.

%TODO Return singleton index?
Define decideLClerk : cert -> cert -> idx -> prop by
	decideLClerk Cert Cert (idx "local") :=
		Cert = (apply _ _ _ _ _)
%		/\ println "decideLClerk apply" /\ print_cert Cert %DEBUG
		;
	decideLClerk Cert Cert Idx :=
		Cert = (apply? _ _ Idx _)
%		/\ println "decideLClerk apply?" /\ print_cert Cert %DEBUG
		;
	decideLClerk (apply# N AU SU AC SC (btlocal (idx "local") Idx))
	             (apply# N AU SU AC SC Idx)
	             (idx "local")
%	:= println "decideLClerk apply#" %DEBUG
	;
	decideLClerk (pair# Cert1 Cert2) (pair# Cert1' Cert2') (idx2 Idx1 Idx2) :=
		decideLClerk Cert1 Cert1' Idx1 /\
		decideLClerk Cert2 Cert2' Idx2
%		/\ print "decideLClerk pair#" /\ println (idx2 Idx1 Idx2) %DEBUG
		.

%TODO What to return? Or let the kernel fill the gaps
%NOTE Whereas we have extended all local indexes to account for pairs, this
% elaboration does not transcend to lemmas, at least yet! This is the only
% exception in the scheme.
Define decideLClerk' : cert -> cert -> idx -> prop by
	decideLClerk' Cert Cert Idx :=
		Cert = (apply _ _ _ _ _)
%		/\ print "decideLClerk' apply" /\ println Idx /\ print_cert Cert %DEBUG
		;
	decideLClerk' Cert Cert Idx :=
		Cert = (apply? _ _ Idx _)
%		/\ print "decideLClerk' apply?" /\ println Idx /\ print_cert Cert %DEBUG
		;
	decideLClerk' (apply# N AU SU AC SC (btlemma Idx Idx')) (apply# N AU SU AC SC Idx') Idx
%	:= println "decideLClerk' apply#" %DEBUG
	;
	decideLClerk' (pair# Cert1 Cert2) (pair# Cert1' Cert2') Idx :=
		decideLClerk' Cert1 Cert1' Idx /\
		decideLClerk' Cert2 Cert2' Idx
%		/\ print "decideLClerk' pair#" /\ println Idx %DEBUG
		.

Define storeRClerk : cert -> cert -> prop by
	storeRClerk Cert Cert
%	:= println "storeRClerk" /\ print_cert Cert %DEBUG
	.

% 'apply' makes sense here in the sense that we want to finish in N bipoles or
% fewer; 'search' also contributes to the end of the derivation. 'apply?' is
% however not so clear because it can specify a lemma, in which case it would
% not apply in principle, or a local formula, where the indexing discipline does
% not affect the right hand side, but would be in some sense subsumed by it.
% And what about pair# and its index?
%NOTE See e.g.
%	times_det (pair# (induction 2 1 0 1 0) (induction# 2 1 0 1 0 Idx)).
% This causes a reordering in the list which seems out of place! Maybe there is
% more than one similar variation?
%TODO Compare with previous version, everything else looks ok... checking the
% resulting elaboration certificates is what would be needed.
Define decideRClerk : cert -> cert -> prop by
	decideRClerk Cert Cert := (
		Cert = (apply _ _ _ _ _) \/
		Cert = (apply? _ _ _ _) \/
		Cert = search )
%		/\ println "decideRClerk" /\ print_cert Cert %DEBUG
		;
	decideRClerk (apply# N AU SU AC SC (btlocal (idx "local") Idx))
	             (apply# N AU SU AC SC Idx)
%	:= println "decideRClerk apply#" %DEBUG
	;
	decideRClerk (pair# Cert1 Cert2) (pair# Cert1' Cert2') :=
		decideRClerk Cert1 Cert1' /\
		decideRClerk Cert2 Cert2'
%		/\ println "decideRClerk" %DEBUG
		.

Define releaseLExpert : cert -> cert -> prop by
	releaseLExpert Cert Cert' :=
		endBipole Cert Cert'
%		/\ println "releaseLExpert" /\ print_cert Cert /\ print_cert Cert' %DEBUG
		.

Define releaseRExpert : cert -> cert -> prop by
	releaseRExpert Cert Cert' :=
		endBipole Cert Cert'
%		/\ println "releaseRExpert" /\ print_cert Cert /\ print_cert Cert' %DEBUG
		.
