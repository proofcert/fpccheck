%TODO Plenty of refactoring with debug-admin-fpc!

% Note: when printers are used, no _ placeholders should be used i.e. for
% don't-care indexes, as these will generate sequences of matches.

%%%%%%%%%%%%%%%%%%%%%
% Helper predicates %
%%%%%%%%%%%%%%%%%%%%%

% Little-endian encoding
Define increment_string : list string -> list string -> prop by
	increment_string ("0" :: Str) ("1" :: Str) ;
	increment_string ("1" :: Str) ("2" :: Str) ;
	increment_string ("2" :: Str) ("3" :: Str) ;
	increment_string ("3" :: Str) ("4" :: Str) ;
	increment_string ("4" :: Str) ("5" :: Str) ;
	increment_string ("5" :: Str) ("6" :: Str) ;
	increment_string ("6" :: Str) ("7" :: Str) ;
	increment_string ("7" :: Str) ("8" :: Str) ;
	increment_string ("8" :: Str) ("9" :: Str) ;
	increment_string ("9" :: nil) ("0" :: "1" :: nil) ;
	increment_string ("9" :: LSB :: Str) ("0" :: Str') :=
		increment_string (LSB :: Str) Str'.

Define idx_to_string : numidx -> list string -> prop by
	idx_to_string z ("0" :: nil) ;
	idx_to_string (s N) Str := exists Str',
		idx_to_string N Str' /\
		increment_string Str' Str.

Define print_little_endian : list string -> prop by
	print_little_endian nil ;
	print_little_endian (LSB :: Rest) :=
		print_little_endian Rest /\
		printstr LSB.

%%%%%%%%%%%%%%%%%%%
% Pretty printers %
%%%%%%%%%%%%%%%%%%%

%NOTE Careful! Now this is just a small part of an index (misleading name)
Define print_idx : numidx -> prop by
	print_idx I := exists S,
		idx_to_string I S /\
		print_little_endian S.

Define print_cert : cert -> prop by
	print_cert Cert := println Cert.
