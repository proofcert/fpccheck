Kind   numidx   type.
Type   z        numidx.
Type   s        numidx -> numidx.

Type   idx    string -> idx.

Type   induction   numidx -> numidx -> numidx -> numidx -> numidx -> cert.
Type   apply       numidx -> numidx -> numidx -> numidx -> numidx -> cert.
Type   search                                         cert.
Type   inductionS    numidx -> numidx -> numidx -> numidx -> numidx -> (i -> bool) -> cert.

Define unmarshal : cert -> cert -> prop by unmarshal C C.










Define ffClerk : cert -> prop by
ffClerk (induction _ _ _ _ _) ;
ffClerk (inductionS _ _ _ _ _ _) ;
ffClerk (apply _ _ _ _ _) ;
ffClerk search.

Define ttClerk : cert -> cert -> prop by
ttClerk (induction N A S B T) (induction N A S B T) ;
ttClerk (inductionS N A S B T I) (inductionS N A S B T I) ;
ttClerk (apply N A S B T) (apply N A S B T) ;
ttClerk search search.

Define andClerk : cert -> cert -> prop by
andClerk (induction N A S B T) (induction N A S B T) ;
andClerk (inductionS N A S B T I) (inductionS N A S B T I) ;
andClerk (apply N A S B T) (apply N A S B T) ;
andClerk search search.

Define orClerk : cert -> cert -> cert -> prop by
orClerk (induction N A S B T) (induction N A S B T) (induction N A S B T) ;
orClerk (inductionS N A S B T I) (inductionS N A S B T I) (inductionS N A S B T I) ;
orClerk (apply N A S B T) (apply N A S B T) (apply N A S B T) ;
orClerk search search search.

Define impClerk : cert -> cert -> prop by
impClerk (induction N A S B T) (induction N A S B T) ;
impClerk (inductionS N A S B T I) (inductionS N A S B T I) ;
impClerk (apply N A S B T) (apply N A S B T) ;
impClerk search search.

Define eqClerk : cert -> cert -> prop by
eqClerk (induction N A S B T) (induction N A S B T) ;
eqClerk (inductionS N A S B T I) (inductionS N A S B T I) ;
eqClerk (apply N A S B T) (apply N A S B T) ;
eqClerk search search.


Define ttExpert : cert -> prop by
ttExpert (induction _ _ _ _ _) ;
ttExpert (inductionS _ _ _ _ _ _) ;
ttExpert (apply _ _ _ _ _) ;
ttExpert search.

Define andExpert : cert -> cert -> cert -> prop by
andExpert (induction N A S B T) (induction N A S B T) (induction N A S B T) ;
andExpert (inductionS N A S B T I) (inductionS N A S B T I) (inductionS N A S B T I) ;
andExpert (apply N A S B T) (apply N A S B T) (apply N A S B T) ;
andExpert search search search.

Define orExpert : cert -> cert -> choice -> prop by
orExpert (induction N A S B T) (induction N A S B T) left ;
orExpert (induction N A S B T) (induction N A S B T) right ;
orExpert (inductionS N A S B T I) (inductionS N A S B T I) left ;
orExpert (inductionS N A S B T I) (inductionS N A S B T I) right ;
orExpert (apply N A S B T) (apply N A S B T) left ;
orExpert (apply N A S B T) (apply N A S B T) right ;
orExpert search search left ;
orExpert search search right.

Define impExpert : cert -> cert -> cert -> prop by
impExpert _ _ _ := false.

Define impExpert' : cert -> cert -> cert -> prop by
impExpert' (induction N A S B T) (induction N A S B T) (induction N A S B T) ;
impExpert' (inductionS N A S B T I) (inductionS N A S B T I) (inductionS N A S B T I) ;
impExpert' (apply N A S B T) (apply N A S B T) (apply N A S B T) ;
impExpert' search search search.

Define eqExpert : cert -> prop by
eqExpert (induction _ _ _ _ _) ;
eqExpert (inductionS _ _ _ _ _ _) ;
eqExpert (apply _ _ _ _ _) ;
eqExpert search.



Define allClerk : cert -> (i -> cert) -> prop by
allClerk (induction N A S B T) (x\ induction N A S B T) ;
allClerk (inductionS N A S B T I) (x\ inductionS N A S B T I) ;
allClerk (apply N A S B T) (x\ apply N A S B T) ;
allClerk search (x\ search).

Define someClerk : cert -> (i -> cert) -> prop by
someClerk (induction N A S B T) (x\ induction N A S B T) ;
someClerk (inductionS N A S B T I) (x\ inductionS N A S B T I) ;
someClerk (apply N A S B T) (x\ apply N A S B T) ;
someClerk search (x\ search).

Define allExpert : cert -> cert -> i -> prop by
allExpert (induction N A S B T) (induction N A S B T) _ ;
allExpert (inductionS N A S B T I) (inductionS N A S B T I) _ ;
allExpert (apply N A S B T) (apply N A S B T) _ ;
allExpert search search _.

Define someExpert : cert -> cert -> i -> prop by
someExpert (induction N A S B T) (induction N A S B T) _ ;
someExpert (inductionS N A S B T I) (inductionS N A S B T I) _ ;
someExpert (apply N A S B T) (apply N A S B T) _ ;
someExpert search search _.


Define indClerk : cert -> cert -> (i -> cert) -> (i -> bool) -> prop by
indClerk (inductionS N A S B T I) (apply N A S B T) (x\ apply N A S B T) I.

Define indClerk' : cert -> (i -> cert) -> prop by
indClerk' (induction N A S B T) (x\ apply N A S B T).

Define coindClerk : cert -> cert -> (i -> cert) -> (i -> bool) -> prop by
coindClerk (inductionS N A S B T I) (apply N A S B T) (x\ apply N A S B T) I.

Define coindClerk' : cert -> (i -> cert) -> prop by
coindClerk' (induction N A S B T) (x\ apply N A S B T).


Define unfoldLClerk : cert -> cert -> prop by
unfoldLClerk (apply N A S (s B) T) (apply N A S B T).

Define unfoldRExpert : cert -> cert -> prop by
unfoldRExpert (apply N A S B (s T)) (apply N A S B T).

Define unfoldLExpert : cert -> cert -> prop by
unfoldLExpert (apply N A S B (s T)) (apply N A S B T).

Define unfoldRClerk : cert -> cert -> prop by
unfoldRClerk (apply N A S (s B) T) (apply N A S B T).


Define freezeLClerk : cert -> cert -> idx -> prop by
freezeLClerk (induction N A S B T) (induction N A S B T) (idx "atom") ;
freezeLClerk (inductionS N A S B T I) (inductionS N A S B T I) (idx "atom") ;
freezeLClerk (apply N A S B T) (apply N A S B T) (idx "atom") ;
freezeLClerk search search (idx "atom").

Define initRExpert : cert -> idx -> prop by
initRExpert (induction _ _ _ _ _) (idx "atom") ;
initRExpert (inductionS _ _ _ _ _ _) (idx "atom") ;
initRExpert (apply _ _ _ _ _) (idx "atom") ;
initRExpert search (idx "atom").

Define freezeRClerk : cert -> cert -> prop by
freezeRClerk (induction N A S B T) (induction N A S B T) ;
freezeRClerk (inductionS N A S B T I) (inductionS N A S B T I) ;
freezeRClerk (apply N A S B T) (apply N A S B T) ;
freezeRClerk search search.

Define initLExpert : cert -> prop by
initLExpert (induction _ _ _ _ _) ;
initLExpert (inductionS _ _ _ _ _ _) ;
initLExpert (apply _ _ _ _ _) ;
initLExpert search.


Define storeLClerk : cert -> cert -> idx -> prop by
storeLClerk (induction N A S B T) (induction N A S B T) (idx "local") ;
storeLClerk (inductionS N A S B T I) (inductionS N A S B T I) (idx "local") ;
storeLClerk (apply N A S B T) (apply N A S B T) (idx "local") ;
storeLClerk search search (idx "local").

Define decideLClerk : cert -> cert -> idx -> prop by
decideLClerk (apply N A S B T) (apply N A S B T) (idx "local").

Define decideLClerk' : cert -> cert -> idx -> prop by
decideLClerk' (apply N A S B T) (apply N A S B T) _.

Define storeRClerk : cert -> cert -> prop by
storeRClerk (induction N A S B T) (induction N A S B T) ;
storeRClerk (inductionS N A S B T I) (inductionS N A S B T I) ;
storeRClerk (apply N A S B T) (apply N A S B T) ;
storeRClerk search search.

Define decideRClerk : cert -> cert -> prop by
decideRClerk (apply N A S B T) (apply N A S B T) ;
decideRClerk search search.

Define releaseLExpert : cert -> cert -> prop by
releaseLExpert (apply (s N) A S _ _) (apply N A S A S) ;
releaseLExpert (apply z _ _ _ _) search.

Define releaseRExpert : cert -> cert -> prop by
releaseRExpert (apply (s N) A S _ _) (apply N A S A S) ;
releaseRExpert (apply z _ _ _ _) search.
