Kind nonneg type.
Kind numidx type.

Type apply nonneg -> nonneg -> nonneg -> nonneg -> nonneg -> cert.
Type iddfs nonneg -> cert.
Type iddfsidx idx.
Type idx nonneg -> idx.
Type idx2 idx -> idx -> idx.
Type idxatom idx.
Type idxlocal idx.
Type induction nonneg -> nonneg -> nonneg -> nonneg -> nonneg -> cert.
Type inductionS nonneg -> nonneg -> nonneg -> nonneg -> nonneg -> ( i -> bool ) -> cert.
Type pair# cert -> cert -> cert.
Type s numidx -> numidx.
Type search cert.
Type ss nonneg -> nonneg.
Type startiddfs cert.
Type z numidx.
Type zz nonneg.

Define unmarshal : cert -> cert -> prop by unmarshal C C.

%TODO fix in translator
Define is_nonneg : nonneg -> prop by
is_nonneg zz := println "is_nonneg zz" ;
is_nonneg (ss N) := is_nonneg N /\ println "is_nonneg (ss N)".

Define allClerk : cert -> ( i -> cert ) -> prop by
allClerk (pair# L0 R0) (x\pair# (L1 x) (R1 x)) := allClerk L0 L1 /\ allClerk R0 R1 /\ println "allClerk (pair# L0 R0) (x\pair# (L1 x) (R1 x))" ;
allClerk startiddfs (x\iddfs N) := is_nonneg N /\ println "allClerk startiddfs (x\iddfs N)" ;
allClerk (iddfs N) (x\iddfs N) := println "allClerk (iddfs N) (x\iddfs N)" ;
allClerk search x\search := println "allClerk search x\search" ;
allClerk (apply N A S B T) (x\apply N A S B T) := println "allClerk (apply N A S B T) (x\apply N A S B T)" ;
allClerk (inductionS N A S B T I)
                                (x\inductionS N A S B T I) := println "allClerk (inductionS N A S B T I)
                                (x\inductionS N A S B T I)" ;
allClerk (induction N A S B T)
                           (x\induction N A S B T) := println "allClerk (induction N A S B T)
                           (x\induction N A S B T)".

Define allExpert : cert -> cert -> i -> prop by
allExpert (pair# L0 R0) (pair# L1 R1) T := allExpert L0 L1 T /\ allExpert R0 R1 T /\ println "allExpert (pair# L0 R0) (pair# L1 R1) T" ;
allExpert (iddfs N) (iddfs N) X := println "allExpert (iddfs N) (iddfs N) X" ;
allExpert search search X := println "allExpert search search X" ;
allExpert (apply N A S B T) (apply N A S B T) X := println "allExpert (apply N A S B T) (apply N A S B T) X" ;
allExpert (inductionS N A S B T I)
                                     (inductionS N A S B T I) X := println "allExpert (inductionS N A S B T I)
                                     (inductionS N A S B T I) X" ;
allExpert (induction N A S B T)
                                (induction N A S B T) X := println "allExpert (induction N A S B T)
                                (induction N A S B T) X".

Define andClerk : cert -> cert -> prop by
andClerk (pair# L0 R0) (pair# L1 R1) := andClerk L0 L1 /\ andClerk R0 R1 /\ println "andClerk (pair# L0 R0) (pair# L1 R1)" ;
andClerk (iddfs N) (iddfs N) := println "andClerk (iddfs N) (iddfs N)" ;
andClerk search search := println "andClerk search search" ;
andClerk (apply N A S B T) (apply N A S B T) := println "andClerk (apply N A S B T) (apply N A S B T)" ;
andClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "andClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
andClerk (induction N A S B T) (induction N A S B T) := println "andClerk (induction N A S B T) (induction N A S B T)".

Define andExpert : cert -> cert -> cert -> prop by
andExpert (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2) := andExpert L0 L1 L2 /\ andExpert R0 R1 R2 /\ println "andExpert (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2)" ;
andExpert (iddfs N) (iddfs N) (iddfs N) := println "andExpert (iddfs N) (iddfs N) (iddfs N)" ;
andExpert search search search := println "andExpert search search search" ;
andExpert (apply N A S B T) (apply N A S B T)
                           (apply N A S B T) := println "andExpert (apply N A S B T) (apply N A S B T)
                           (apply N A S B T)" ;
andExpert (inductionS N A S B T I)
                                (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "andExpert (inductionS N A S B T I)
                                (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
andExpert (induction N A S B T)
                           (induction N A S B T) (induction N A S B T) := println "andExpert (induction N A S B T)
                           (induction N A S B T) (induction N A S B T)".

Define coindClerk : cert -> cert -> ( i -> cert ) -> ( i -> bool ) -> prop by
coindClerk (pair# L0 R0) (pair# L1 R1)
                                        (x\pair# (L2 x) (R2 x)) S := coindClerk L0 L1 L2 S /\ coindClerk R0 R1 R2 S /\ println "coindClerk (pair# L0 R0) (pair# L1 R1)
                                        (x\pair# (L2 x) (R2 x)) S" ;
coindClerk (iddfs N) (iddfs N) (x\iddfs N) X := println "coindClerk (iddfs N) (iddfs N) (x\iddfs N) X" ;
coindClerk (inductionS N A S B T I)
                                (apply N A S B T) (x\apply N A S B T) I := println "coindClerk (inductionS N A S B T I)
                                (apply N A S B T) (x\apply N A S B T) I".

Define coindClerk' : cert -> ( i -> cert ) -> prop by
coindClerk' (pair# L0 R0) (x\pair# (L1 x) (R1 x)) := coindClerk' L0 L1 /\ coindClerk' R0 R1 /\ println "coindClerk' (pair# L0 R0) (x\pair# (L1 x) (R1 x))" ;
coindClerk' (iddfs N) (x\iddfs N) := println "coindClerk' (iddfs N) (x\iddfs N)" ;
coindClerk' (induction N A S B T)
                           (x\apply N A S B T) := println "coindClerk' (induction N A S B T)
                           (x\apply N A S B T)".

Define decideLClerk : cert -> cert -> idx -> prop by
decideLClerk (pair# L0 R0) (pair# L1 R1)
                                  (idx2 IL IR) := decideLClerk L0 L1 IL /\ decideLClerk R0 R1 IR /\ println "decideLClerk (pair# L0 R0) (pair# L1 R1)
                                  (idx2 IL IR)" ;
decideLClerk (iddfs N) (iddfs N) iddfsidx := println "decideLClerk (iddfs N) (iddfs N) iddfsidx" ;
decideLClerk (apply N A S B T) (apply N A S B T)
                           idxlocal := println "decideLClerk (apply N A S B T) (apply N A S B T)
                           idxlocal".

Define decideLClerk' : cert -> cert -> idx -> prop by
decideLClerk' (pair# L0 R0) (pair# L1 R1) I := decideLClerk' L0 L1 I /\ decideLClerk' R0 R1 I /\ println "decideLClerk' (pair# L0 R0) (pair# L1 R1) I" ;
decideLClerk' (iddfs N) (iddfs N) X := println "decideLClerk' (iddfs N) (iddfs N) X" ;
decideLClerk' (apply N A S B T)
                                (apply N A S B T) X := println "decideLClerk' (apply N A S B T)
                                (apply N A S B T) X".

Define decideRClerk : cert -> cert -> prop by
decideRClerk (pair# L0 R0) (pair# L1 R1) := decideRClerk L0 L1 /\ decideRClerk R0 R1 /\ println "decideRClerk (pair# L0 R0) (pair# L1 R1)" ;
decideRClerk (iddfs N) (iddfs N) := println "decideRClerk (iddfs N) (iddfs N)" ;
decideRClerk search search := println "decideRClerk search search" ;
decideRClerk (apply N A S B T) (apply N A S B T) := println "decideRClerk (apply N A S B T) (apply N A S B T)".

Define eqClerk : cert -> cert -> prop by
eqClerk (pair# L0 R0) (pair# L1 R1) := eqClerk L0 L1 /\ eqClerk R0 R1 /\ println "eqClerk (pair# L0 R0) (pair# L1 R1)" ;
eqClerk (iddfs N) (iddfs N) := println "eqClerk (iddfs N) (iddfs N)" ;
eqClerk search search := println "eqClerk search search" ;
eqClerk (apply N A S B T) (apply N A S B T) := println "eqClerk (apply N A S B T) (apply N A S B T)" ;
eqClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "eqClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
eqClerk (induction N A S B T) (induction N A S B T) := println "eqClerk (induction N A S B T) (induction N A S B T)".

Define eqExpert : cert -> prop by
eqExpert (pair# L0 R0) := eqExpert L0 /\ eqExpert R0 /\ println "eqExpert (pair# L0 R0)" ;
eqExpert (iddfs X) := println "eqExpert (iddfs X)" ;
eqExpert search := println "eqExpert search" ;
eqExpert (apply X X1 X2 X3 X4) := println "eqExpert (apply X X1 X2 X3 X4)" ;
eqExpert (inductionS X X1 X2 X3 X4 X5) := println "eqExpert (inductionS X X1 X2 X3 X4 X5)" ;
eqExpert (induction X X1 X2 X3 X4) := println "eqExpert (induction X X1 X2 X3 X4)".

Define ffClerk : cert -> prop by
ffClerk (pair# L0 R0) := ffClerk L0 /\ ffClerk R0 /\ println "ffClerk (pair# L0 R0)" ;
ffClerk (iddfs X) := println "ffClerk (iddfs X)" ;
ffClerk search := println "ffClerk search" ;
ffClerk (apply X X1 X2 X3 X4) := println "ffClerk (apply X X1 X2 X3 X4)" ;
ffClerk (inductionS X X1 X2 X3 X4 X5) := println "ffClerk (inductionS X X1 X2 X3 X4 X5)" ;
ffClerk (induction X X1 X2 X3 X4) := println "ffClerk (induction X X1 X2 X3 X4)".

Define freezeLClerk : cert -> cert -> idx -> prop by
freezeLClerk (pair# L0 R0) (pair# L1 R1)
                                  (idx2 IL IR) := freezeLClerk L0 L1 IL /\ freezeLClerk R0 R1 IR /\ println "freezeLClerk (pair# L0 R0) (pair# L1 R1)
                                  (idx2 IL IR)" ;
freezeLClerk (iddfs N) (iddfs N) iddfsidx := println "freezeLClerk (iddfs N) (iddfs N) iddfsidx" ;
freezeLClerk search search idxatom := println "freezeLClerk search search idxatom" ;
freezeLClerk (apply N A S B T) (apply N A S B T)
                           idxatom := println "freezeLClerk (apply N A S B T) (apply N A S B T)
                           idxatom" ;
freezeLClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) idxatom := println "freezeLClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) idxatom" ;
freezeLClerk (induction N A S B T)
                           (induction N A S B T) idxatom := println "freezeLClerk (induction N A S B T)
                           (induction N A S B T) idxatom".

Define freezeRClerk : cert -> cert -> prop by
freezeRClerk (pair# L0 R0) (pair# L1 R1) := freezeRClerk L0 L1 /\ freezeRClerk R0 R1 /\ println "freezeRClerk (pair# L0 R0) (pair# L1 R1)" ;
freezeRClerk (iddfs N) (iddfs N) := println "freezeRClerk (iddfs N) (iddfs N)" ;
freezeRClerk search search := println "freezeRClerk search search" ;
freezeRClerk (apply N A S B T) (apply N A S B T) := println "freezeRClerk (apply N A S B T) (apply N A S B T)" ;
freezeRClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "freezeRClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
freezeRClerk (induction N A S B T)
                           (induction N A S B T) := println "freezeRClerk (induction N A S B T)
                           (induction N A S B T)".

Define impClerk : cert -> cert -> prop by
impClerk (pair# L0 R0) (pair# L1 R1) := impClerk L0 L1 /\ impClerk R0 R1 /\ println "impClerk (pair# L0 R0) (pair# L1 R1)" ;
impClerk (iddfs N) (iddfs N) := println "impClerk (iddfs N) (iddfs N)" ;
impClerk search search := println "impClerk search search" ;
impClerk (apply N A S B T) (apply N A S B T) := println "impClerk (apply N A S B T) (apply N A S B T)" ;
impClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "impClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
impClerk (induction N A S B T) (induction N A S B T) := println "impClerk (induction N A S B T) (induction N A S B T)".

Define impExpert : cert -> cert -> cert -> prop by
impExpert (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2) := impExpert L0 L1 L2 /\ impExpert R0 R1 R2 /\ println "impExpert (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2)" ;
impExpert (iddfs N) (iddfs N) (iddfs N) := println "impExpert (iddfs N) (iddfs N) (iddfs N)".

Define impExpert' : cert -> cert -> cert -> prop by
impExpert' (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2) := impExpert' L0 L1 L2 /\ impExpert' R0 R1 R2 /\ println "impExpert' (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2)" ;
impExpert' (iddfs N) (iddfs N) (iddfs N) := println "impExpert' (iddfs N) (iddfs N) (iddfs N)" ;
impExpert' search search search := println "impExpert' search search search" ;
impExpert' (apply N A S B T) (apply N A S B T)
                           (apply N A S B T) := println "impExpert' (apply N A S B T) (apply N A S B T)
                           (apply N A S B T)" ;
impExpert' (inductionS N A S B T I)
                                (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "impExpert' (inductionS N A S B T I)
                                (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
impExpert' (induction N A S B T)
                           (induction N A S B T) (induction N A S B T) := println "impExpert' (induction N A S B T)
                           (induction N A S B T) (induction N A S B T)".

Define indClerk : cert -> cert -> ( i -> cert ) -> ( i -> bool ) -> prop by
indClerk (pair# L0 R0) (pair# L1 R1)
                                        (x\pair# (L2 x) (R2 x)) S := indClerk L0 L1 L2 S /\ indClerk R0 R1 R2 S /\ println "indClerk (pair# L0 R0) (pair# L1 R1)
                                        (x\pair# (L2 x) (R2 x)) S" ;
indClerk (iddfs N) (iddfs N) (x\iddfs N) X := println "indClerk (iddfs N) (iddfs N) (x\iddfs N) X" ;
indClerk (inductionS N A S B T I)
                                (apply N A S B T) (x\apply N A S B T) I := println "indClerk (inductionS N A S B T I)
                                (apply N A S B T) (x\apply N A S B T) I".

Define indClerk' : cert -> ( i -> cert ) -> prop by
indClerk' (pair# L0 R0) (x\pair# (L1 x) (R1 x)) := indClerk' L0 L1 /\ indClerk' R0 R1 /\ println "indClerk' (pair# L0 R0) (x\pair# (L1 x) (R1 x))" ;
indClerk' (iddfs N) (x\iddfs N) := println "indClerk' (iddfs N) (x\iddfs N)" ;
indClerk' (induction N A S B T) (x\apply N A S B T) := println "indClerk' (induction N A S B T) (x\apply N A S B T)".

Define initLExpert : cert -> prop by
initLExpert (pair# L0 R0) := initLExpert L0 /\ initLExpert R0 /\ println "initLExpert (pair# L0 R0)" ;
initLExpert (iddfs X) := println "initLExpert (iddfs X)" ;
initLExpert search := println "initLExpert search" ;
initLExpert (apply X X1 X2 X3 X4) := println "initLExpert (apply X X1 X2 X3 X4)" ;
initLExpert (inductionS X X1 X2 X3 X4 X5) := println "initLExpert (inductionS X X1 X2 X3 X4 X5)" ;
initLExpert (induction X X1 X2 X3 X4) := println "initLExpert (induction X X1 X2 X3 X4)".

Define initRExpert : cert -> idx -> prop by
initRExpert (pair# L0 R0) (idx2 IL IR) := initRExpert L0 IL /\ initRExpert R0 IR /\ println "initRExpert (pair# L0 R0) (idx2 IL IR)" ;
initRExpert (iddfs X) iddfsidx := println "initRExpert (iddfs X) iddfsidx" ;
initRExpert search idxatom := println "initRExpert search idxatom" ;
initRExpert (apply X X1 X2 X3 X4) idxatom := println "initRExpert (apply X X1 X2 X3 X4) idxatom" ;
initRExpert (inductionS X X1 X2 X3 X4 X5)
                                     idxatom := println "initRExpert (inductionS X X1 X2 X3 X4 X5)
                                     idxatom" ;
initRExpert (induction X X1 X2 X3 X4) idxatom := println "initRExpert (induction X X1 X2 X3 X4) idxatom".

%Define is_nonneg : nonneg -> prop by
%is_nonneg (ss N) := is_nonneg N /\ println "is_nonneg (ss N)" ;
%is_nonneg zz := println "is_nonneg zz".

Define orClerk : cert -> cert -> cert -> prop by
orClerk (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2) := orClerk L0 L1 L2 /\ orClerk R0 R1 R2 /\ println "orClerk (pair# L0 R0) (pair# L1 R1)
                                  (pair# L2 R2)" ;
orClerk (iddfs N) (iddfs N) (iddfs N) := println "orClerk (iddfs N) (iddfs N) (iddfs N)" ;
orClerk search search search := println "orClerk search search search" ;
orClerk (apply N A S B T) (apply N A S B T)
                           (apply N A S B T) := println "orClerk (apply N A S B T) (apply N A S B T)
                           (apply N A S B T)" ;
orClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "orClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
orClerk (induction N A S B T) (induction N A S B T)
                           (induction N A S B T) := println "orClerk (induction N A S B T) (induction N A S B T)
                           (induction N A S B T)".

Define orExpert : cert -> cert -> choice -> prop by
orExpert (pair# L0 R0) (pair# L1 R1) C := orExpert L0 L1 C /\ orExpert R0 R1 C /\ println "orExpert (pair# L0 R0) (pair# L1 R1) C" ;
orExpert (iddfs N) (iddfs N) right := println "orExpert (iddfs N) (iddfs N) right" ;
orExpert (iddfs N) (iddfs N) left := println "orExpert (iddfs N) (iddfs N) left" ;
orExpert search search right := println "orExpert search search right" ;
orExpert search search left := println "orExpert search search left" ;
orExpert (apply N A S B T) (apply N A S B T) right := println "orExpert (apply N A S B T) (apply N A S B T) right" ;
orExpert (apply N A S B T) (apply N A S B T) left := println "orExpert (apply N A S B T) (apply N A S B T) left" ;
orExpert (inductionS N A S B T I)
                                (inductionS N A S B T I) right := println "orExpert (inductionS N A S B T I)
                                (inductionS N A S B T I) right" ;
orExpert (inductionS N A S B T I)
                                (inductionS N A S B T I) left := println "orExpert (inductionS N A S B T I)
                                (inductionS N A S B T I) left" ;
orExpert (induction N A S B T) (induction N A S B T)
                           right := println "orExpert (induction N A S B T) (induction N A S B T)
                           right" ;
orExpert (induction N A S B T) (induction N A S B T)
                           left := println "orExpert (induction N A S B T) (induction N A S B T)
                           left".

Define releaseLExpert : cert -> cert -> prop by
releaseLExpert (pair# L0 R0) (pair# L1 R1) := releaseLExpert L0 L1 /\ releaseLExpert R0 R1 /\ println "releaseLExpert (pair# L0 R0) (pair# L1 R1)" ;
releaseLExpert (iddfs (ss N)) (iddfs N) := println "releaseLExpert (iddfs (ss N)) (iddfs N)" ;
releaseLExpert (apply zz X X1 X2 X3) search := println "releaseLExpert (apply zz X X1 X2 X3) search" ;
releaseLExpert (apply (ss N) A S X X1)
                            (apply N A S A S) := println "releaseLExpert (apply (ss N) A S X X1)
                            (apply N A S A S)".

Define releaseRExpert : cert -> cert -> prop by
releaseRExpert (pair# L0 R0) (pair# L1 R1) := releaseRExpert L0 L1 /\ releaseRExpert R0 R1 /\ println "releaseRExpert (pair# L0 R0) (pair# L1 R1)" ;
releaseRExpert (iddfs (ss N)) (iddfs N) := println "releaseRExpert (iddfs (ss N)) (iddfs N)" ;
releaseRExpert (apply zz X X1 X2 X3) search := println "releaseRExpert (apply zz X X1 X2 X3) search" ;
releaseRExpert (apply (ss N) A S X X1)
                            (apply N A S A S) := println "releaseRExpert (apply (ss N) A S X X1)
                            (apply N A S A S)".

Define someClerk : cert -> ( i -> cert ) -> prop by
someClerk (pair# L0 R0) (x\pair# (L1 x) (R1 x)) := someClerk L0 L1 /\ someClerk R0 R1 /\ println "someClerk (pair# L0 R0) (x\pair# (L1 x) (R1 x))" ;
someClerk (iddfs N) (x\iddfs N) := println "someClerk (iddfs N) (x\iddfs N)" ;
someClerk search x\search := println "someClerk search x\search" ;
someClerk (apply N A S B T) (x\apply N A S B T) := println "someClerk (apply N A S B T) (x\apply N A S B T)" ;
someClerk (inductionS N A S B T I)
                                (x\inductionS N A S B T I) := println "someClerk (inductionS N A S B T I)
                                (x\inductionS N A S B T I)" ;
someClerk (induction N A S B T)
                           (x\induction N A S B T) := println "someClerk (induction N A S B T)
                           (x\induction N A S B T)".

Define someExpert : cert -> cert -> i -> prop by
someExpert (pair# L0 R0) (pair# L1 R1) T := someExpert L0 L1 T /\ someExpert R0 R1 T /\ println "someExpert (pair# L0 R0) (pair# L1 R1) T" ;
someExpert (iddfs N) (iddfs N) X := println "someExpert (iddfs N) (iddfs N) X" ;
someExpert search search X := println "someExpert search search X" ;
someExpert (apply N A S B T) (apply N A S B T)
                                X := println "someExpert (apply N A S B T) (apply N A S B T)
                                X" ;
someExpert (inductionS N A S B T I)
                                     (inductionS N A S B T I) X := println "someExpert (inductionS N A S B T I)
                                     (inductionS N A S B T I) X" ;
someExpert (induction N A S B T)
                                (induction N A S B T) X := println "someExpert (induction N A S B T)
                                (induction N A S B T) X".

Define storeLClerk : cert -> cert -> idx -> prop by
storeLClerk (pair# L0 R0) (pair# L1 R1)
                                  (idx2 IL IR) := storeLClerk L0 L1 IL /\ storeLClerk R0 R1 IR /\ println "storeLClerk (pair# L0 R0) (pair# L1 R1)
                                  (idx2 IL IR)" ;
storeLClerk (iddfs N) (iddfs N) iddfsidx := println "storeLClerk (iddfs N) (iddfs N) iddfsidx" ;
storeLClerk search search idxlocal := println "storeLClerk search search idxlocal" ;
storeLClerk (apply N A S B T) (apply N A S B T)
                           idxlocal := println "storeLClerk (apply N A S B T) (apply N A S B T)
                           idxlocal" ;
storeLClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) idxlocal := println "storeLClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) idxlocal" ;
storeLClerk (induction N A S B T)
                           (induction N A S B T) idxlocal := println "storeLClerk (induction N A S B T)
                           (induction N A S B T) idxlocal".

Define storeRClerk : cert -> cert -> prop by
storeRClerk (pair# L0 R0) (pair# L1 R1) := storeRClerk L0 L1 /\ storeRClerk R0 R1 /\ println "storeRClerk (pair# L0 R0) (pair# L1 R1)" ;
storeRClerk (iddfs N) (iddfs N) := println "storeRClerk (iddfs N) (iddfs N)" ;
storeRClerk search search := println "storeRClerk search search" ;
storeRClerk (apply N A S B T) (apply N A S B T) := println "storeRClerk (apply N A S B T) (apply N A S B T)" ;
storeRClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "storeRClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
storeRClerk (induction N A S B T)
                           (induction N A S B T) := println "storeRClerk (induction N A S B T)
                           (induction N A S B T)".

Define ttClerk : cert -> cert -> prop by
ttClerk (pair# L0 R0) (pair# L1 R1) := ttClerk L0 L1 /\ ttClerk R0 R1 /\ println "ttClerk (pair# L0 R0) (pair# L1 R1)" ;
ttClerk (iddfs N) (iddfs N) := println "ttClerk (iddfs N) (iddfs N)" ;
ttClerk search search := println "ttClerk search search" ;
ttClerk (apply N A S B T) (apply N A S B T) := println "ttClerk (apply N A S B T) (apply N A S B T)" ;
ttClerk (inductionS N A S B T I)
                                (inductionS N A S B T I) := println "ttClerk (inductionS N A S B T I)
                                (inductionS N A S B T I)" ;
ttClerk (induction N A S B T) (induction N A S B T) := println "ttClerk (induction N A S B T) (induction N A S B T)".

Define ttExpert : cert -> prop by
ttExpert (pair# L0 R0) := ttExpert L0 /\ ttExpert R0 /\ println "ttExpert (pair# L0 R0)" ;
ttExpert (iddfs X) := println "ttExpert (iddfs X)" ;
ttExpert search := println "ttExpert search" ;
ttExpert (apply X X1 X2 X3 X4) := println "ttExpert (apply X X1 X2 X3 X4)" ;
ttExpert (inductionS X X1 X2 X3 X4 X5) := println "ttExpert (inductionS X X1 X2 X3 X4 X5)" ;
ttExpert (induction X X1 X2 X3 X4) := println "ttExpert (induction X X1 X2 X3 X4)".

Define unfoldLClerk : cert -> cert -> prop by
unfoldLClerk (pair# L0 R0) (pair# L1 R1) := unfoldLClerk L0 L1 /\ unfoldLClerk R0 R1 /\ println "unfoldLClerk (pair# L0 R0) (pair# L1 R1)" ;
unfoldLClerk (iddfs N) (iddfs N) := println "unfoldLClerk (iddfs N) (iddfs N)" ;
unfoldLClerk (apply N A S (ss B) T)
                           (apply N A S B T) := println "unfoldLClerk (apply N A S (ss B) T)
                           (apply N A S B T)".

Define unfoldLExpert : cert -> cert -> prop by
unfoldLExpert (pair# L0 R0) (pair# L1 R1) := unfoldLExpert L0 L1 /\ unfoldLExpert R0 R1 /\ println "unfoldLExpert (pair# L0 R0) (pair# L1 R1)" ;
unfoldLExpert (iddfs N) (iddfs N) := println "unfoldLExpert (iddfs N) (iddfs N)" ;
unfoldLExpert (apply N A S B (ss T))
                           (apply N A S B T) := println "unfoldLExpert (apply N A S B (ss T))
                           (apply N A S B T)".

Define unfoldRClerk : cert -> cert -> prop by
unfoldRClerk (pair# L0 R0) (pair# L1 R1) := unfoldRClerk L0 L1 /\ unfoldRClerk R0 R1 /\ println "unfoldRClerk (pair# L0 R0) (pair# L1 R1)" ;
unfoldRClerk (iddfs N) (iddfs N) := println "unfoldRClerk (iddfs N) (iddfs N)" ;
unfoldRClerk (apply N A S (ss B) T)
                           (apply N A S B T) := println "unfoldRClerk (apply N A S (ss B) T)
                           (apply N A S B T)".

Define unfoldRExpert : cert -> cert -> prop by
unfoldRExpert (pair# L0 R0) (pair# L1 R1) := unfoldRExpert L0 L1 /\ unfoldRExpert R0 R1 /\ println "unfoldRExpert (pair# L0 R0) (pair# L1 R1)" ;
unfoldRExpert (iddfs N) (iddfs N) := println "unfoldRExpert (iddfs N) (iddfs N)" ;
unfoldRExpert (apply N A S B (ss T))
                           (apply N A S B T) := println "unfoldRExpert (apply N A S B (ss T))
                           (apply N A S B T)".
