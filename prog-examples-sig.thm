#include "prog.thm".

% Evaluate risk of unbounded backtracking
% Refactor common fragment to logic.thm
% Each module should probably have its definition (if only it were cumulative!)
Define copy_i : list imap -> i -> i -> prop by
	copy_i Theta argv argv ;
	copy_i Theta (X ++ Y) (U ++ V) := copy_i Theta X U /\ copy_i Theta Y V ;
	%
	copy_i Theta nili nili ;
	copy_i Theta (X && Y) (U && V) := copy_i Theta X U /\ copy_i Theta Y V ;
	%
	copy_i Theta tti tti ;
	copy_i Theta ffi ffi ;
	copy_i Theta (andi X Y) (andi U V) := copy_i Theta X U /\ copy_i Theta Y V ;
	copy_i Theta (ori X Y) (ori U V) := copy_i Theta X U /\ copy_i Theta Y V ;
	copy_i Theta (impi X Y) (impi U V) := copy_i Theta X U /\ copy_i Theta Y V ;
	%
	copy_i Theta zi zi ;
	copy_i Theta (si X) (si U) := copy_i Theta X U ;
	copy_i Theta (sumi X Y Z) (sumi U V W) := copy_i Theta X U /\ copy_i Theta Y V /\ copy_i Theta Z W ;
	copy_i Theta (multi X Y Z) (multi U V W) := copy_i Theta X U /\ copy_i Theta Y V /\ copy_i Theta Z W ;
	%
	copy_i Theta X U := member (imap X U) Theta.

Define name_mnu : string -> (i -> bool) -> prop by
	name_mnu "memb" Memb := memb Memb ;
	name_mnu "prog" Prog := prog Prog ;
	name_mnu "ctx"  Ctx  := ctx  Ctx ;
	name_mnu "seq"  Seq  := seq  Seq.

