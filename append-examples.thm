#include "append.thm".

Define appendable : cert -> i -> i -> i -> prop by
	appendable Cert L1 L2 L3 :=
		append Append /\
		async Cert nil nil nil (unk (
			Append (L1 ++ L2 ++ L3 ++ argv)
		)).

% Test predicates to pave the way for append_total
Define eigen_unify : cert -> prop by
	eigen_unify Cert :=
	append Append /\
	async Cert nil nil nil (unk (
		all a\ all b\ all c\ (imp
			(Append (a ++ b ++ c ++ argv))
			(some d\ some e\ some f\ Append (d ++ e ++ f ++ argv)))
	)).

Define append_total : (i -> bool) -> cert -> prop by
	append_total Append Cert :=
		append Append /\ is_list IsList /\
		async Cert nil nil nil (unk (
			all L1\ all L2\ (imp
				(IsList (L1 ++ argv))
				(some L3\ Append (L1 ++ L2 ++ L3 ++ argv)))
		)).

Define append_assoc : (i -> bool) -> cert -> prop by
	append_assoc Append Cert :=
		append Append /\
		async Cert nil nil nil (unk (
			all A\ all B\ all C\ all AB\ all ABC\ (imp
			(Append (A ++ B ++ AB ++ argv)) (imp
			(Append (AB ++ C ++ ABC ++ argv))
			(some BC\ (and
				(Append (B ++ C ++ BC ++ argv))
				(Append (A ++ BC ++ ABC ++ argv))))))
		)).

Define append_det : (i -> bool) -> cert -> prop by
	append_det Append Cert :=
		append Append /\
		async Cert nil nil nil (unk (
			all I\ all J\ all K\ all L\ (imp
				(Append (I ++ J ++ K ++ argv)) (imp
				(Append (I ++ J ++ L ++ argv))
				(eq K L)))
		)).
