#include "../kernel/logic.thm".
#include "../kernel/cert-sig.thm".
#include "../fpc/simple-fpc.thm".
#include "plus-examples-sig.thm".
#include "../kernel/kernel.thm".
#include "plus-examples.thm".

#assert plus_zero _ (induction 1 0 1 0 1).
#assert plus_zero _ (pair# (induction 1 0 1 0 1) (induction# 1 0 1 0 1 Idx)).
#assert plus_zero Plus ( inductionS 1 0 1 0 1
	(Args\ all N\ imp (eq Args (N ++ argv)) (Plus (N ++ zero ++ N ++ argv)))).
#assert plus_zero Plus (inductionS? (apply 1 0 0 0 0) (_\ apply 1 0 1 0 1)
	(Args\ all N\ imp (eq Args (N ++ argv)) (Plus (N ++ zero ++ N ++ argv)))).

#assert plus_succ _ (induction 1 0 1 0 1).
#assert plus_succ _ (pair# (induction 1 0 1 0 1) (induction# 1 0 1 0 1 Idx)).
#assert plus_succ Plus (inductionS 1 0 1 0 1
	(Args\ all K\ all M\ all N\ imp
		(eq Args (K ++ M ++ N ++ argv))
		(Plus (K ++ (succ M) ++ (succ N) ++ argv)))).

#assert plus_comm _ _ (induction 2 1 0 1 0).
#assert plus_comm _ _ (pair# (induction 2 1 0 1 0) (induction# 2 1 0 1 0 Idx)).

#assert plus_total _ (induction 1 0 1 0 1).
#assert plus_total _ (pair# (induction 1 0 1 0 1) (induction# 1 0 1 0 1 Idx)).
#assert plus_total Plus (inductionS 1 0 1 0 1
	(Args\ all A\ all B\ imp
		(eq Args (A ++ argv))
		(some C\ Plus (A ++ B ++ C ++ argv)))).

#assert plus_det _ (induction 1 1 0 1 0).
#assert plus_det _ (pair# (induction 1 1 0 1 0) (induction# 1 1 0 1 0 Idx)).
#assert plus_det Plus (inductionS 1 1 0 1 0
	(Args\ all A\ all B\ all C\ all D\ imp
		(eq Args (A ++ B ++ C ++ argv)) (imp
		(Plus (A ++ B ++ D ++ argv))
		(eq C D)))).

#assert plus_assoc _ (induction 1 1 1 1 1).
#assert plus_assoc _ (pair# (induction 1 1 1 1 1) (induction# 1 1 1 1 1 Idx)).
% Here, an explicit chain is currently needed
#assert plus_assoc Plus (inductionS? (apply 1 0 0 0 0) (_\ apply 1 1 1 1 1)
	(x\ all l1\ all l2\ all l4\ all l6\ all l7\ imp
		(eq x (l4 ++ l2 ++ l6 ++ argv)) (imp
		(Plus (l6 ++ l1 ++ l7 ++ argv))
		(some l3\ and
			(Plus (l2 ++ l1 ++ l3 ++ argv))
			(Plus (l4 ++ l3 ++ l7 ++ argv)))))).

#assert augend_nat (induction 1 1 1 1 1).
#assert augend_nat (pair# (induction 1 1 1 1 1) (induction# 1 1 1 1 1 Idx)).

#assert addend_nat (induction 1 1 1 1 1).
#assert addend_nat (pair# (induction 1 1 1 1 1) (induction# 1 1 1 1 1 Idx)).

#assert plus_assoc_rl
	(apply? 0 0 (idx "plus_comm")
	(apply? 0 0 (idx "addend_nat")
	(apply? 0 0 (idx "plus_comm")
	(apply? 0 0 (idx "plus_assoc")
	(apply? 0 0 (idx "plus_comm")
	(apply? 0 0 (idx "addend_nat")
	(apply? 0 0 (idx "plus_comm")
	search))))))).

%#assert plus_assoc_rl (apply 7 0 0 0 0).
%#assert plus_assoc_rl (pair# (apply 7 0 0 0 0) (apply# 7 0 0 0 0 Idx)).
