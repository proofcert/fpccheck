#include "../kernel/logic.thm".
#include "../kernel/cert-sig.thm".
#include "../fpc/simple-fpc.thm".
#include "plus-examples-sig.thm".
#include "../kernel/kernel.thm".
#include "plus-examples.thm".

#assert plus_zero _ (induction (ss zz) zz (ss zz) zz (ss zz)).
#assert plus_zero _ (pair# (induction (ss zz) zz (ss zz) zz (ss zz)) (induction# (ss zz) zz (ss zz) zz (ss zz) Idx)).
#assert plus_zero Plus ( inductionS (ss zz) zz (ss zz) zz (ss zz)
	(Args\ all N\ imp (eq Args (arg@ N argv)) (Plus (arg@ N (arg@ zero (arg@ N argv)))))).
#assert plus_zero Plus (inductionS? (apply (ss zz) zz zz zz zz) (_\ apply (ss zz) zz (ss zz) zz (ss zz))
	(Args\ all N\ imp (eq Args (arg@ N argv)) (Plus (arg@ N (arg@ zero (arg@ N argv)))))).

#assert plus_succ _ (induction (ss zz) zz (ss zz) zz (ss zz)).
#assert plus_succ _ (pair# (induction (ss zz) zz (ss zz) zz (ss zz)) (induction# (ss zz) zz (ss zz) zz (ss zz) Idx)).
#assert plus_succ Plus (inductionS (ss zz) zz (ss zz) zz (ss zz)
	(Args\ all K\ all M\ all N\ imp
		(eq Args (arg@ K (arg@ M (arg@ N argv))))
		(Plus (arg@ K (arg@ (succ M) (arg@ (succ N) argv)))))).

#assert plus_comm _ _ (induction (ss (ss zz)) (ss zz) zz (ss zz) zz).
#assert plus_comm _ _ (pair# (induction (ss (ss zz)) (ss zz) zz (ss zz) zz) (induction# (ss (ss zz)) (ss zz) zz (ss zz) zz Idx)).

#assert plus_total _ (induction (ss zz) zz (ss zz) zz (ss zz)).
#assert plus_total _ (pair# (induction (ss zz) zz (ss zz) zz (ss zz)) (induction# (ss zz) zz (ss zz) zz (ss zz) Idx)).
#assert plus_total Plus (inductionS (ss zz) zz (ss zz) zz (ss zz)
	(Args\ all A\ all B\ imp
		(eq Args (arg@ A argv))
		(some C\ Plus (arg@ A (arg@ B (arg@ C argv)))))).

#assert plus_det _ (induction (ss zz) (ss zz) zz (ss zz) zz).
#assert plus_det _ (pair# (induction (ss zz) (ss zz) zz (ss zz) zz) (induction# (ss zz) (ss zz) zz (ss zz) zz Idx)).
#assert plus_det Plus (inductionS (ss zz) (ss zz) zz (ss zz) zz
	(Args\ all A\ all B\ all C\ all D\ imp
		(eq Args (arg@ A (arg@ B (arg@ C argv)))) (imp
		(Plus (arg@ A (arg@ B (arg@ D argv))))
		(eq C D)))).

#assert plus_assoc _ (induction (ss zz) (ss zz) (ss zz) (ss zz) (ss zz)).
#assert plus_assoc _ (pair# (induction (ss zz) (ss zz) (ss zz) (ss zz) (ss zz)) (induction# (ss zz) (ss zz) (ss zz) (ss zz) (ss zz) Idx)).
% Here, an explicit chain is currently needed
#assert plus_assoc Plus (inductionS? (apply (ss zz) zz zz zz zz) (_\ apply (ss zz) (ss zz) (ss zz) (ss zz) (ss zz))
	(x\ all l1\ all l2\ all l4\ all l6\ all l7\ imp
		(eq x (arg@ l4 (arg@ l2 (arg@ l6 argv)))) (imp
		(Plus (arg@ l6 (arg@ l1 (arg@ l7 argv))))
		(some l3\ and
			(Plus (arg@ l2 (arg@ l1 (arg@ l3 argv))))
			(Plus (arg@ l4 (arg@ l3 (arg@ l7 argv)))))))).

#assert augend_nat (induction (ss zz) (ss zz) (ss zz) (ss zz) (ss zz)).
#assert augend_nat (pair# (induction (ss zz) (ss zz) (ss zz) (ss zz) (ss zz)) (induction# (ss zz) (ss zz) (ss zz) (ss zz) (ss zz) Idx)).

#assert addend_nat (induction (ss zz) (ss zz) (ss zz) (ss zz) (ss zz)).
#assert addend_nat (pair# (induction (ss zz) (ss zz) (ss zz) (ss zz) (ss zz)) (induction# (ss zz) (ss zz) (ss zz) (ss zz) (ss zz) Idx)).

#assert plus_assoc_rl
	(apply? zz zz (idx    (s z) )
	(apply? zz zz (idx       z  )
	(apply? zz zz (idx    (s z) )
	(apply? zz zz (idx (s (s z)))
	(apply? zz zz (idx    (s z) )
	(apply? zz zz (idx       z  )
	(apply? zz zz (idx    (s z) )
	search))))))).

%#assert plus_assoc_rl (apply (ss (ss (ss (ss (ss (ss (ss zz))))))) zz zz zz zz).
%#assert plus_assoc_rl (pair# (apply (ss (ss (ss (ss (ss (ss (ss zz))))))) zz zz zz zz) (apply# (ss (ss (ss (ss (ss (ss (ss zz))))))) zz zz zz zz Idx)).
