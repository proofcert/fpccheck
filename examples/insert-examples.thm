Define test_insert_ordered_f : (i -> bool) -> bool -> prop by
	test_insert_ordered_f Ordered F := exists IsNatList IsNat Insert,
		is_natlist IsNatList /\ is_nat IsNat /\ insert Insert /\ F =
		(some L\ some N\ some Ord\ and
			(and
				(IsNatList (arg@ L argv))
				(IsNat (arg@ N argv)))
			(and
				(Ordered (arg@ L argv)) (and
				(Insert (arg@ N (arg@ L (arg@ Ord argv))))
				(imp (Ordered (arg@ Ord argv)) ff)))
		).

Define test_insert_ordered : cert -> prop by
	test_insert_ordered Cert := exists Ordered F,
		ordered Ordered /\
		test_insert_ordered_f Ordered F /\
		prove Cert F.

Define test_insert_ordered_bad : cert -> prop by
	test_insert_ordered_bad Cert := exists OrderedBad F,
		ordered_bad OrderedBad /\
		test_insert_ordered_f OrderedBad F /\
		prove Cert F.
