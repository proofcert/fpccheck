Define ctx1_struct : (i -> bool) -> (i -> bool) -> cert -> prop by
	ctx1_struct Member IsNat Cert := exists Ctx,
		ctx1 Ctx /\ memb Member /\ is_nat IsNat /\
		prove Cert (all N\ all L\ (imp
			(Ctx (arg@ L argv)) (imp
			(Member (arg@ N (arg@ L argv)))
			(IsNat (arg@ N argv))))).

Define ctx1_length : (i -> bool) -> cert -> prop by
	ctx1_length Length Cert := exists CtxEq Length,
		ctx1_equal CtxEq /\ length Length /\
		prove Cert (all L1\ all L2\ (imp
			(CtxEq (arg@ L1 (arg@ L2 argv)))
			(some N\ (and
				(Length (arg@ L1 (arg@ N argv)))
				(Length (arg@ L2 (arg@ N argv))))))).
