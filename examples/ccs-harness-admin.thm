#include "../kernel/logic.thm".
#include "../kernel/cert-sig.thm".
#include "../fpc/admin-fpc.thm".
#include "ccs-examples-sig.thm".
#include "../kernel/kernel.thm".
#include "ccs-examples.thm".

% A simple smoke test for the basic encoding
#assert_not mu_id_step_absurd
	(search (ctrl (limits z z z z z z z z z) (names nil (name "X")))).

#assert mu_id_step_absurd
	(induction (ctrl (limits z z z z z z z z z) (names nil (name "X"))) (name "X")
		(dummy\ search (ctrl (limits z z z z z z z z z) (names nil (name "X"))))).

% This is a good example where additional guided certificates could supply more
% information about the proof and reduce choice; because we are currently
% sharing a counter for both asynchronous unfolding types, the problem is
% exacerbated.
%   In addition, 'step' has a complex definition which could be guided, perhaps,
% more optimally, as most cases probably do not require as much computation. But
% interestingly, in this case we need less than the Abella proof supplies.
#assert sim_mu_par_ext
	(induction (ctrl (limits z z z z z z z z z) (names nil (name "X"))) (name "X")
		(dummy\ search (ctrl (limits z z z (s (s z)) z z z z z) (names nil (name "X"))))).

#assert sim_mu_par
	(apply (ctrl (limits z z z z z z z z z) (names nil (name "X"))) (name "mu_par_ext") (name "X")
		(search (ctrl (limits z z z z z z z z z) (names nil (name "X"))))).
