#include "../kernel/logic.thm".
#include "../kernel/cert-sig.thm".
#include "../fpc/admin-fpc.thm".
#include "times-examples-sig.thm".
#include "../kernel/kernel.thm".
#include "times-examples.thm".

#assert times_zero
	(induction (ctrl (limits z z z z z z z z z) (names nil (name "X"))) (name "X")
		(dummy\ search (ctrl (limits (s (s z)) z z z z (s (s z)) z z z) (names nil (name "X"))))).

#assert times_total'
	(induction          (ctrl (limits    z  z z z z    z  z z z) (names nil (name "X"))) (name "X")
		(dummy\ case    (ctrl (limits    z  z z z z    z  z z z) (names nil (name "X")))
			(search     (ctrl (limits    z  z z z z (s z) z z z) (names nil (name "X"))))
			(apply      (ctrl (limits (s z) z z z z    z  z z z) (names nil (name "X"))) (name "plus_total") (name "X")
				(search (ctrl (limits (s z) z z z z (s z) z z z) (names nil (name "X")))))
		)
	).

#assert times_det
	(induction          (ctrl (limits    z  z z    z  z z z z z) (names nil (name "X"))) (name "X")
		(dummy\ case    (ctrl (limits    z  z z    z  z z z z z) (names nil (name "X")))
			(search     (ctrl (limits    z  z z (s z) z z z z z) (names nil (name "X"))))
			(apply      (ctrl (limits (s z) z z (s z) z z z z z) (names nil (name "X"))) (name "plus_det") (name "X")
				(search (ctrl (limits (s z) z z    z  z z z z z) (names nil (name "X"))))))).

% What if I don't know which lemma to pick?
#assert times_det
	(induction          (ctrl (limits    z  z z    z  z z z z z) (names nil (name "X"))) (name "X")
		(dummy\ case    (ctrl (limits    z  z z    z  z z z z z) (names nil (name "X")))
			(search     (ctrl (limits    z  z z (s z) z z z z z) (names nil (name "X"))))
			(apply      (ctrl (limits (s z) z z (s z) z z z z z) (names nil (name "X"))) (name Lemma) (name "X")
				(search (ctrl (limits (s z) z z    z  z z z z z) (names nil (name "X"))))))).

#assert times_comm
	(induction          (ctrl (limits       z   z z    z  z z z             z     z) (names nil (name "X"))) (name "X")
		(dummy\ case    (ctrl (limits       z   z z    z  z z z             z     z) (names nil (name "X")))
			(apply      (ctrl (limits       z   z z    z  z z z             z     z) (names nil (name "X"))) (name "times_zero") (name "X")
				(search (ctrl (limits    (s z)  z z    z  z z z             z     z) (names nil (name "X")))))
			(apply      (ctrl (limits       z   z z (s z) z z z          (s z)    z) (names nil (name "X"))) (name "augend_nat") (name "X")
			(apply      (ctrl (limits (s (s z)) z z    z  z z z       (s (s z))   z) (names nil (name "X"))) (name "times_succ'") (name "X")
			(apply      (ctrl (limits    (s z)  z z    z  z z z    (s (s (s z)))  z) (names nil (name "X"))) (name "plus_det"  ) (name "X")
				(search (ctrl (limits    (s z)  z z    z  z z z (s (s (s (s z)))) z) (names nil (name "X"))))))))).

% What if I don't know which lemma to pick? (note the combination of buckets and
% lemma uncertainty can be costly indeed)... this one in particular needs to be
% checked just in case, but everything should work just fine.
#assert times_comm
	(induction          (ctrl (limits       z   z z    z  z z z             z     z) (names nil (name "X"))) (name "X")
		(dummy\ case    (ctrl (limits       z   z z    z  z z z             z     z) (names nil (name "X")))
			(apply      (ctrl (limits       z   z z    z  z z z             z     z) (names nil (name "X"))) (name "times_zero") (name "X")
				(search (ctrl (limits    (s z)  z z    z  z z z             z     z) (names nil (name "X")))))
			(apply      (ctrl (limits       z   z z (s z) z z z          (s z)    z) (names nil (name "X"))) (name "augend_nat") (name "X")
			(apply      (ctrl (limits (s (s z)) z z    z  z z z       (s (s z))   z) (names nil (name "X"))) (name Lemma1       ) (name "X")
			(apply      (ctrl (limits    (s z)  z z    z  z z z    (s (s (s z)))  z) (names nil (name "X"))) (name Lemma2      ) (name "X")
				(search (ctrl (limits    (s z)  z z    z  z z z (s (s (s (s z)))) z) (names nil (name "X"))))))))).

% Whenever we enter a lemma, we will need to escape it, and its continuation
% needs to open one new bipole at least (and hopefully just one).
%   Probably, I want to favor freezes without "successor"-like stuff, which I'd
% unroll prior to that point: here how to pick efficiently is very important
% (and from the "case" tactice there seems to be enough information in the
% Abella script to decide).

% Needs something else to work
%#assert times_succ
