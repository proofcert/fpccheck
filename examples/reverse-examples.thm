#include "template.thm".

Define reverse_total : cert -> prop by
	reverse_total Cert :=
		reverse Reverse /\ is_list IsList /\
		is_total2 Cert Reverse IsList.

Define test_reverse_involutive_f : bool -> prop by
	test_reverse_involutive_f F :=
		is_natlist IsNatList /\ reverse Reverse /\ F =
		(some L\ some K\ and
			(IsNatList (L ++ argv)) (and
			(Reverse (L ++ K ++ argv)) (and
			(IsNatList (K ++ argv))
			(imp (eq L K) ff)))).

Define test_reverse_involutive : cert -> prop by
	test_reverse_involutive Cert :=
		test_reverse_involutive_f TestReverseInvolutive /\
		prove Cert TestReverseInvolutive.

%reverse_det
%reverse_assoc
