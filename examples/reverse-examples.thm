#include "template.thm".

Define reverse_total : cert -> prop by
	reverse_total Cert := exists Reverse IsList,
		reverse Reverse /\ is_list IsList /\
		is_total2 Cert Reverse IsList.

Define test_reverse_involutive_f : bool -> prop by
	test_reverse_involutive_f F := exists IsNatList Reverse,
		is_natlist IsNatList /\ reverse Reverse /\ F =
		(some L\ some K\ and
			(IsNatList (arg@ L argv)) (and
			(Reverse (arg@ L (arg@ K argv))) (and
			(IsNatList (arg@ K argv))
			(imp (eq L K) ff)))).

Define test_reverse_involutive : cert -> prop by
	test_reverse_involutive Cert := exists TestReverseInvolutive,
		test_reverse_involutive_f TestReverseInvolutive /\
		prove Cert TestReverseInvolutive.

%reverse_det
%reverse_assoc
