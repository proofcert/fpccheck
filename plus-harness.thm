#include "logic.thm".               % First-order logic syntax
#include "cert-sig.thm".            % Certificate declarations
#include "admin-fpc.thm".           % Concrete FPC (needed before kernel!)
#include "plus-examples-sig.thm".   % Concrete signature (needed before kernel!)
#include "kernel.thm".              % Kernel
#include "plus-examples.thm".       % Concrete examples

#assert plus_zero Plus
	(induce z z z
		(Args\ all N\ imp
			(eq Args (N ++ argv))
			(Plus (N ++ zero ++ N ++ argv)))
		(dummy\ start z z z)).

#assert plus_zero _
	(autoinduce z z z (dummy\ start z z z)).

#assert plus_succ Plus
	(induce z z z
		(Args\ all K\ all M\ all N\ imp
			(eq Args (K ++ M ++ N ++ argv))
			(Plus (K ++ (succ M) ++ (succ N) ++ argv)))
		(dummy\ start z z z)).

#assert plus_succ _
	(autoinduce z z z (dummy\ start z z z)).

% Requires plus_zero as a lemma/embedded induction
%#assert plus_comm
%	(induce z z z
%		(Args\ all M\ all N\ all K\ imp
%			(eq Args (M ++ N ++ K ++ argv)) (imp
%			(IsNat (K ++ argv))
%			(Plus (N ++ M ++ K ++ argv))))
%		(dummy\ start z z z)).

#assert plus_total Plus
	(induce z z z
		(Args\ all A\ all B\ imp
			(eq Args (A ++ argv))
			(some C\ Plus (A ++ B ++ C ++ argv)))
		(dummy\ start z z z)).

#assert plus_total _
	(autoinduce z z z (dummy\ start z z z)).

#assert plus_det Plus
	(induce z z z
		(Args\ all A\ all B\ all C\ all D\ imp
			(eq Args (A ++ B ++ C ++ argv)) (imp
			(Plus (A ++ B ++ D ++ argv))
			(eq C D)))
		(dummy\ start z z (s z))).

#assert plus_det _
	(autoinduce z z z (dummy\ start z z (s z))).

#assert plus_assoc Plus
	(induce z z z
		(x\ all l1\ all l2\ all l4\ all l6\ all l7\ imp
			(eq x (l4 ++ l2 ++ l6 ++ argv)) (imp
			(Plus (l6 ++ l1 ++ l7 ++ argv))
			(some l3\ and
				(Plus (l2 ++ l1 ++ l3 ++ argv))
				(Plus (l4 ++ l3 ++ l7 ++ argv)))))
		(dummy\ start z z (s z))).

#assert plus_assoc _
	(autoinduce z z z (dummy\ start z z (s z))).
