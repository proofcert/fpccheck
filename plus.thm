% Natural numbers
Type   zero   i.
Type   succ   i -> i.

Define plus : (i -> bool) -> prop by
	plus (mu Pred\Args\
		(some K\ some M\ some N\ (and (eq Args (K ++ M ++ N ++ argv))
		(or
			(and
				(eq K zero)
				(eq M N))
			(some K'\ some N'\ (and (and
				(eq K (succ K'))
				(eq N (succ N')))
				(Pred (K' ++ M ++ N' ++ argv)))))))).

Define is_nat : (i -> bool) -> prop by
	is_nat (mu Pred\Args\
		(some N\ (and (eq Args (N ++ argv))
		(or
			(eq N zero)
			(some N'\ (and
				(eq N (succ N'))
				(Pred (N' ++ argv)))))))).
