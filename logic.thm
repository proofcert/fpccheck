Kind   bool, i   type.

% Generic arity fixpoints would be nice
% No polymorphism, just i?
% Remember we work from the intuitionistic fragment/muLJF, not LL

%Type   tensor, oplus, with, par   bool -> bool -> bool.
%Type   one,    zero,  top,  bot   bool.
%Type   all, some                  (i -> bool) -> bool.
%Type   eq, neq                    i -> i -> bool.

%Type tensor, aand, oplus, imp   bool -> bool -> bool.
%Type top, bot, one, zero        bool.
%Type all, some                  (i -> bool) -> bool.
%Type eq, neq                    i -> i -> bool.
%Type mu0, nu0                   (                bool  ->                bool) ->                bool.
%Type mu1, nu1                   ((i ->           bool) -> i ->           bool) -> i ->           bool.
%Type mu2, nu2                   ((i -> i ->      bool) -> i -> i ->      bool) -> i -> i      -> bool.
%Type mu3, nu3                   ((i -> i -> i -> bool) -> i -> i -> i -> bool) -> i -> i -> i -> bool.

%Define negative : bool -> prop by
%  negative top ; negative (aand A B) ;
%  negative bot ; negative (imp A B) ;
%  negative (all B) ; negative (neq T S) ;
%  negative (nu0 B) ; negative (nu1 B T) ; negative (nu2 B T S) ; negative (nu3 B T S R).

%Define positive : bool -> prop by
%  positive one ; positive (tensor A B) ;
%  positive zero ; positive (oplus A B) ;
%  positive (some B) ; positive (eq T S) ;
%  positive (mu0 B) ; positive (mu1 B T) ; positive (mu2 B T S) ; positive (mu3 B T S R).

%Define mu_atom : bool -> prop by
%  mu_atom (mu0 B) ;
%  mu_atom (mu1 B T) ;
%  mu_atom (mu2 B T S) ;
%  mu_atom (mu3 B T S R ).

%Define mu_unfold : bool -> bool -> prop by
%  mu_unfold (mu0 B)       (B (mu0 B)) ;
%  mu_unfold (mu1 B T)     (B (mu1 B) T) ;
%  mu_unfold (mu2 B T S)   (B (mu2 B) T S) ;
%  mu_unfold (mu3 B T S R) (B (mu3 B) T S R).

%Define nu_atom : bool -> prop by
%  nu_atom (nu0 B) ;
%  nu_atom (nu1 B T) ;
%  nu_atom (nu2 B T S) ;
%  nu_atom (nu3 B T S R ).

%Define nu_unfold : bool -> bool -> prop by
%  nu_unfold (nu0 B)       (B (nu0 B)) ;
%  nu_unfold (nu1 B T)     (B (nu1 B) T) ;
%  nu_unfold (nu2 B T S)   (B (nu2 B) T S) ;
%  nu_unfold (nu3 B T S R) (B (nu3 B) T S R).