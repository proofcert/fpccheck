#include "template.thm".

Define plus_zero : (i -> bool) -> cert -> prop by
	plus_zero Plus Cert :=
		plus Plus /\ is_nat IsNat /\
		prove Cert
			(all N\ (imp (IsNat (N ++ argv)) (Plus (N ++ zero ++ N ++ argv)))).

Define plus_succ : (i -> bool) -> cert -> prop by
	plus_succ Plus Cert :=
		plus Plus /\
		prove Cert (all K\ all M\ all N\ (imp
			(Plus (K ++       M  ++       N  ++ argv))
			(Plus (K ++ (succ M) ++ (succ N) ++ argv)))).

Define plus_comm : (i -> bool) -> (i -> bool) -> cert -> prop by
	plus_comm Plus IsNat Cert :=
		plus Plus /\ is_nat IsNat /\ is_commutative Cert Plus IsNat.

Define plus_total : (i -> bool) -> cert -> prop by
	plus_total Plus Cert :=
		plus Plus /\ is_nat IsNat /\ is_total Cert Plus IsNat.

Define plus_det : (i -> bool) -> cert -> prop by
	plus_det Plus Cert :=
		plus Plus /\ is_deterministic Cert Plus.

Define plus_assoc : (i -> bool) -> cert -> prop by
	plus_assoc Plus Cert :=
		plus Plus /\ is_associative Cert Plus.
